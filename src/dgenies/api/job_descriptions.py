from ..allowed_extensions import AllowedExtensions
from ..tools import Tools, Tool

from .datamodels import (
    InputType,
    JobDescription,
    JobInput,
    JobType,
    OptionEntry,
    ToolDescription,
    ToolOption,
)

allowed_extensions = AllowedExtensions().allowed_extensions_per_format

def generate_tool_options_description(tool:Tool) -> list[ToolOption]:
    return [ToolOption(
        name=opt.get('group', None),
        label=opt.get('label', None),
        desc=opt.get('help', ""),
        mutex=opt['type'] == "radio",
        entries=[OptionEntry(
            name = f"{opt.get('group', '')}:{entry['key']}",
            label = entry["label"],
            desc = entry.get('help', ""),
            default = entry.get("default", False),
        ) for entry in opt["entries"]]
    ) for opt in tool.options]


def generate_tool_description(tool: Tool):
    return ToolDescription(
        name=tool.name,
        label=tool.label,
        desc=tool.help,
        needs=(
            [[InputType.query, InputType.target], [InputType.target]] if tool.all_vs_all
            else [[InputType.query, InputType.target]]
        ),
        options=generate_tool_options_description(tool),
    )

align_job = JobDescription(
    type = JobType.align,
    label = 'Align',
    desc = 'Compute an alignement and generate a dotplot',
    tools = [generate_tool_description(t) for t in Tools().tools.values()],
    inputs = [
        JobInput(type=InputType.query, desc='Query file will be displayed on y-axis', allowed_ext=allowed_extensions.get('fasta', [])),
        JobInput(type=InputType.target, desc='Target file will be displayed on x-axis', allowed_ext=allowed_extensions.get('fasta', []))
    ],
    default = Tools().get_default(),
)

plot_job = JobDescription(
    type = JobType.plot,
    label = 'Plot',
    desc = 'Generate a dotplot from an already compute alignment or backup',
    tools = [ToolDescription(
        name=None, label=None,
        desc="Only here to describe plot's input contraints",
        needs=[[InputType.query, InputType.target, InputType.align], [InputType.backup]],
        options=[])],
    inputs = [
        JobInput(type=InputType.query, desc='Query file will be displayed on y-axis', allowed_ext=(allowed_extensions.get('fasta', []) + allowed_extensions.get('idx', []))),
        JobInput(type=InputType.target, desc='Target file will be displayed on x-axis',  allowed_ext=(allowed_extensions.get('fasta', []) + allowed_extensions.get('idx', []))),
        JobInput(type=InputType.align, desc='Alignment file', allowed_ext=allowed_extensions.get('align', [])),
        JobInput(type=InputType.backup, desc='Backup file generated by D-Genies', allowed_ext=allowed_extensions.get('backup', []))
    ],
    default = ""
)

job_descriptions = [align_job, plot_job]